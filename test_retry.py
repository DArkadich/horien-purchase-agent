#!/usr/bin/env python3
"""
–¢–µ—Å—Ç retry-–ª–æ–≥–∏–∫–∏ –¥–ª—è API
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ozon_api import RetryManager, OzonAPI
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_retry_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RetryManager —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RetryManager...")
    
    # –°–æ–∑–¥–∞–µ–º retry manager
    retry_manager = RetryManager(max_retries=2, base_delay=0.1, max_delay=1.0)
    
    # –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    def successful_function():
        return "success"
    
    result = retry_manager.execute_with_retry(successful_function)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {result}")
    
    # –¢–µ—Å—Ç 2: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–∞–¥–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 2 —Ä–∞–∑–∞, –ø–æ—Ç–æ–º —É—Å–ø–µ—à–Ω–∞
    attempt_count = 0
    def failing_then_successful():
        nonlocal attempt_count
        attempt_count += 1
        if attempt_count <= 2:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt_count}")
        return "success after retries"
    
    attempt_count = 0
    result = retry_manager.execute_with_retry(failing_then_successful)
    print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è —Å retry: {result}")
    
    # –¢–µ—Å—Ç 3: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –ø–∞–¥–∞–µ—Ç
    def always_failing():
        raise Exception("–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
    
    result = retry_manager.execute_with_retry(always_failing)
    print(f"‚ùå –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–∞–¥–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {result}")
    
    # –¢–µ—Å—Ç 4: –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è None
    def returning_none():
        return None
    
    result = retry_manager.execute_with_retry(returning_none)
    print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è None: {result}")

def test_retry_status_codes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è retryable —Å—Ç–∞—Ç—É—Å –∫–æ–¥–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ retryable —Å—Ç–∞—Ç—É—Å –∫–æ–¥–æ–≤...")
    
    retry_manager = RetryManager()
    
    # –¢–µ—Å—Ç retryable –∫–æ–¥–æ–≤
    retryable_codes = [500, 502, 503, 504, 429]
    for code in retryable_codes:
        should_retry = retry_manager.should_retry_status_code(code)
        print(f"–ö–æ–¥ {code}: {'üîÑ –ü–æ–≤—Ç–æ—Ä—è—Ç—å' if should_retry else '‚ùå –ù–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å'}")
    
    # –¢–µ—Å—Ç non-retryable –∫–æ–¥–æ–≤
    non_retryable_codes = [200, 400, 401, 403, 404]
    for code in non_retryable_codes:
        should_retry = retry_manager.should_retry_status_code(code)
        print(f"–ö–æ–¥ {code}: {'üîÑ –ü–æ–≤—Ç–æ—Ä—è—Ç—å' if should_retry else '‚ùå –ù–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å'}")

def test_api_with_retry():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —Å retry-–ª–æ–≥–∏–∫–æ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å retry-–ª–æ–≥–∏–∫–æ–π...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
    api = OzonAPI()
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤...")
    products = api.get_products()
    
    if products:
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    analytics = api.get_analytics_data(days=7)  # –¢–æ–ª—å–∫–æ –∑–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è —Ç–µ—Å—Ç–∞
    
    if analytics:
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π: {len(analytics)}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")

def test_retry_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å retry-–ª–æ–≥–∏–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ retry-–ª–æ–≥–∏–∫–∏...")
    
    retry_manager = RetryManager(max_retries=3, base_delay=0.1, max_delay=1.0)
    
    def slow_function():
        time.sleep(0.1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        return "success"
    
    start_time = time.time()
    result = retry_manager.execute_with_retry(slow_function)
    end_time = time.time()
    
    execution_time = end_time - start_time
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å retry: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

def test_retry_with_different_configs():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç retry —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ retry —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏...")
    
    configs = [
        {"max_retries": 1, "base_delay": 0.1, "max_delay": 0.5},
        {"max_retries": 3, "base_delay": 0.2, "max_delay": 2.0},
        {"max_retries": 5, "base_delay": 0.5, "max_delay": 10.0},
    ]
    
    for i, config in enumerate(configs):
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i+1}: {config}")
        
        retry_manager = RetryManager(**config)
        
        attempt_count = 0
        def test_function():
            nonlocal attempt_count
            attempt_count += 1
            if attempt_count <= 2:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt_count}")
            return f"success after {attempt_count} attempts"
        
        attempt_count = 0
        start_time = time.time()
        result = retry_manager.execute_with_retry(test_function)
        end_time = time.time()
        
        execution_time = end_time - start_time
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        print(f"  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ retry-–ª–æ–≥–∏–∫–∏\n")
    
    try:
        test_retry_manager()
        test_retry_status_codes()
        test_retry_performance()
        test_retry_with_different_configs()
        
        # –¢–µ—Å—Ç API —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
        try:
            test_api_with_retry()
        except Exception as e:
            print(f"‚ö†Ô∏è –¢–µ—Å—Ç API –ø—Ä–æ–ø—É—â–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π): {e}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã retry-–ª–æ–≥–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 