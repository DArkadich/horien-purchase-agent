"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç–∏ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∑–∞–∫—É–ø–∫–∞—Ö
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Any, Tuple
from config import (
    DAYS_FORECAST_SHORT, DAYS_FORECAST_LONG, SALES_HISTORY_DAYS,
    get_moq_for_sku, logger
)

class PurchaseForecast:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∑–∞–∫—É–ø–æ–∫"""
    
    def __init__(self):
        self.days_forecast_short = DAYS_FORECAST_SHORT
        self.days_forecast_long = DAYS_FORECAST_LONG
        self.sales_history_days = SALES_HISTORY_DAYS
    
    def prepare_sales_data(self, sales_data: List[Dict[str, Any]]) -> pd.DataFrame:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        """
        logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö...")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        df = pd.DataFrame(sales_data)
        
        if df.empty:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
            return pd.DataFrame()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã
        df['date'] = pd.to_datetime(df['date'])
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ SKU –∏ –¥–∞—Ç–µ
        sales_by_sku = df.groupby(['sku', 'date']).agg({
            'quantity': 'sum',
            'revenue': 'sum'
        }).reset_index()
        
        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(sales_by_sku)} –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
        return sales_by_sku
    
    def prepare_stocks_data(self, stocks_data: List[Dict[str, Any]]) -> pd.DataFrame:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
        """
        logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö...")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        df = pd.DataFrame(stocks_data)
        
        if df.empty:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö")
            return pd.DataFrame()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ SKU
        stocks_by_sku = df.groupby('sku').agg({
            'stock': 'sum',
            'reserved': 'sum'
        }).reset_index()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
        stocks_by_sku['available_stock'] = stocks_by_sku['stock'] - stocks_by_sku['reserved']
        
        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(stocks_by_sku)} –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö")
        return stocks_by_sku
    
    def calculate_daily_sales(self, sales_df: pd.DataFrame) -> pd.DataFrame:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é –¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–¥–∞–∂—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ SKU
        """
        logger.info("–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏...")
        
        if sales_df.empty:
            return pd.DataFrame()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ SKU –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–¥–∞–∂—É
        daily_sales = sales_df.groupby('sku').agg({
            'quantity': 'sum',
            'date': 'nunique'
        }).reset_index()
        
        daily_sales['avg_daily_sales'] = daily_sales['quantity'] / daily_sales['date']
        daily_sales['total_sales_days'] = daily_sales['date']
        
        # –£–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç
        daily_sales = daily_sales.drop('date', axis=1)
        
        logger.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ä–µ–¥–Ω—è—è –¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –¥–ª—è {len(daily_sales)} SKU")
        return daily_sales
    
    def identify_oos_days(self, sales_df: pd.DataFrame, stocks_df: pd.DataFrame) -> pd.DataFrame:
        """
        –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –¥–Ω–∏, –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä—ã –±—ã–ª–∏ –≤ OOS (out of stock)
        """
        logger.info("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–Ω–µ–π OOS...")
        
        if sales_df.empty or stocks_df.empty:
            return pd.DataFrame()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ SKU
        date_range = pd.date_range(
            start=sales_df['date'].min(),
            end=sales_df['date'].max(),
            freq='D'
        )
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ SKU –∏ –¥–∞—Ç
        all_combinations = []
        for sku in sales_df['sku'].unique():
            for date in date_range:
                all_combinations.append({'sku': sku, 'date': date})
        
        combinations_df = pd.DataFrame(all_combinations)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏
        merged_df = combinations_df.merge(
            sales_df, on=['sku', 'date'], how='left'
        ).fillna(0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–Ω–∏ OOS (–∫–æ–≥–¥–∞ –ø—Ä–æ–¥–∞–∂–∏ = 0)
        merged_df['is_oos'] = merged_df['quantity'] == 0
        
        logger.info(f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ {merged_df['is_oos'].sum()} –¥–Ω–µ–π OOS")
        return merged_df
    
    def calculate_forecast(self, sales_df: pd.DataFrame, stocks_df: pd.DataFrame) -> pd.DataFrame:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–∫—É–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ SKU
        """
        logger.info("–†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞–∫—É–ø–æ–∫...")
        
        if sales_df.empty or stocks_df.empty:
            return pd.DataFrame()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–¥–∞–∂—É
        daily_sales = self.calculate_daily_sales(sales_df)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
        forecast_df = daily_sales.merge(stocks_df, on='sku', how='left')
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö–≤–∞—Ç–∏—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø–∞—Å–∞
        forecast_df['days_until_stockout'] = np.where(
            forecast_df['avg_daily_sales'] > 0,
            forecast_df['available_stock'] / forecast_df['avg_daily_sales'],
            float('inf')
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–∫—É–ø–∫–∏
        forecast_df['needs_purchase_short'] = forecast_df['days_until_stockout'] < self.days_forecast_short
        forecast_df['needs_purchase_long'] = forecast_df['days_until_stockout'] < self.days_forecast_long
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫—É–ø–∫–∏
        forecast_df['recommended_quantity'] = np.where(
            forecast_df['needs_purchase_short'],
            np.maximum(
                (self.days_forecast_long - forecast_df['days_until_stockout']) * forecast_df['avg_daily_sales'],
                forecast_df['avg_daily_sales'] * self.days_forecast_short
            ),
            0
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏
        forecast_df['moq'] = forecast_df['sku'].apply(get_moq_for_sku)
        forecast_df['final_order_quantity'] = np.where(
            forecast_df['recommended_quantity'] > 0,
            np.maximum(forecast_df['recommended_quantity'], forecast_df['moq']),
            0
        )
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
        forecast_df['final_order_quantity'] = forecast_df['final_order_quantity'].round().astype(int)
        
        logger.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {len(forecast_df)} SKU")
        return forecast_df
    
    def generate_purchase_report(self, forecast_df: pd.DataFrame) -> List[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –∑–∞–∫—É–ø–∫–∞—Ö
        """
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–∫—É–ø–∫–∞—Ö...")
        
        if forecast_df.empty:
            return []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º SKU, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∑–∞–∫—É–ø–∫–∏
        purchase_items = forecast_df[forecast_df['needs_purchase_short']].copy()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ä–æ—á–Ω–æ—Å—Ç–∏)
        purchase_items = purchase_items.sort_values('days_until_stockout', ascending=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = []
        for _, row in purchase_items.iterrows():
            report_item = {
                'sku': row['sku'],
                'avg_daily_sales': round(row['avg_daily_sales'], 2),
                'current_stock': int(row['available_stock']),
                'days_until_stockout': round(row['days_until_stockout'], 1),
                'recommended_quantity': int(row['final_order_quantity']),
                'moq': int(row['moq']),
                'urgency': 'HIGH' if row['days_until_stockout'] < 10 else 'MEDIUM' if row['days_until_stockout'] < 20 else 'LOW'
            }
            report.append(report_item)
        
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç—á–µ—Ç –¥–ª—è {len(report)} SKU")
        return report
    
    def generate_telegram_message(self, report: List[Dict[str, Any]]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        """
        if not report:
            return "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –∑–∞–∫—É–ø–∫–∏."
        
        message = "üõí *–û—Ç—á–µ—Ç –æ –∑–∞–∫—É–ø–∫–∞—Ö*\n\n"
        
        for item in report[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏ 10 –ø–æ–∑–∏—Ü–∏—è–º–∏
            sku = item['sku']
            days_left = item['days_until_stockout']
            quantity = item['recommended_quantity']
            
            urgency_emoji = "üî¥" if item['urgency'] == 'HIGH' else "üü°" if item['urgency'] == 'MEDIUM' else "üü¢"
            
            message += f"{urgency_emoji} {sku} ‚Üí —Ö–≤–∞—Ç–∏—Ç –Ω–∞ {days_left} –¥–Ω–µ–π. –ó–∞–∫–∞–∑–∞—Ç—å {quantity} —à—Ç\n"
        
        if len(report) > 10:
            message += f"\n... –∏ –µ—â–µ {len(report) - 10} –ø–æ–∑–∏—Ü–∏–π"
        
        message += f"\n\n–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—É–ø–∫–∏: {len(report)}"
        
        return message 