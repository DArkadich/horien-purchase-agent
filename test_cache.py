#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from cache_manager import CacheManager, CachedAPIClient
from ozon_api import OzonAPI
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_cache_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç CacheManager"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CacheManager...")
    
    # –°–æ–∑–¥–∞–µ–º cache manager
    cache_manager = CacheManager(cache_dir="test_cache")
    
    # –¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    test_data = {"test": "data", "number": 42, "list": [1, 2, 3]}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    success = cache_manager.set_cache("test_key", test_data, "test", ttl_hours=1)
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {'–£–°–ü–ï–•' if success else '–ü–†–û–í–ê–õ'}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    retrieved_data = cache_manager.get_cache("test_key")
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {'–£–°–ü–ï–•' if retrieved_data == test_data else '–ü–†–û–í–ê–õ'}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    non_existent = cache_manager.get_cache("non_existent_key")
    print(f"‚úÖ –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {'–£–°–ü–ï–•' if non_existent is None else '–ü–†–û–í–ê–õ'}")
    
    # –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    stats = cache_manager.get_cache_stats()
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {stats}")
    
    # –¢–µ—Å—Ç 4: –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    expired_count = cache_manager.clear_expired_cache()
    print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫—ç—à–∞: {expired_count} –∑–∞–ø–∏—Å–µ–π")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫—ç—à
    cache_manager.clear_all_cache()
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫—ç—à –æ—á–∏—â–µ–Ω")

def test_cached_api_client():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç CachedAPIClient"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CachedAPIClient...")
    
    # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç –∏ cache manager
    api_client = OzonAPI()
    cache_manager = CacheManager(cache_dir="test_cache")
    cached_api = CachedAPIClient(api_client, cache_manager)
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ)
    start_time = time.time()
    products1 = cached_api.get_products_with_cache()
    time1 = time.time() - start_time
    print(f"–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: {len(products1) if products1 else 0} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ {time1:.2f} —Å–µ–∫")
    
    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)
    start_time = time.time()
    products2 = cached_api.get_products_with_cache()
    time2 = time.time() - start_time
    print(f"–í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å: {len(products2) if products2 else 0} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ {time2:.2f} —Å–µ–∫")
    
    if time2 < time1:
        print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –±—ã—Å—Ç—Ä–µ–µ)")
    else:
        print("‚ö†Ô∏è –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
    
    # –¢–µ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    start_time = time.time()
    products3 = cached_api.get_products_with_cache(force_refresh=True)
    time3 = time.time() - start_time
    print(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {len(products3) if products3 else 0} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ {time3:.2f} —Å–µ–∫")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫—ç—à
    cache_manager.clear_all_cache()
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫—ç—à –æ—á–∏—â–µ–Ω")

def test_cache_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    cache_manager = CacheManager(cache_dir="test_cache")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    small_data = {"key": "value"}
    medium_data = {"items": [{"id": i, "name": f"item_{i}"} for i in range(100)]}
    large_data = {"items": [{"id": i, "name": f"item_{i}", "data": "x" * 100} for i in range(1000)]}
    
    test_cases = [
        ("small", small_data),
        ("medium", medium_data),
        ("large", large_data)
    ]
    
    for name, data in test_cases:
        print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {name} –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        start_time = time.time()
        success = cache_manager.set_cache(f"test_{name}", data, "test", ttl_hours=1)
        save_time = time.time() - start_time
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
        start_time = time.time()
        retrieved = cache_manager.get_cache(f"test_{name}")
        load_time = time.time() - start_time
        
        print(f"  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {save_time:.4f} —Å–µ–∫")
        print(f"  –ó–∞–≥—Ä—É–∑–∫–∞: {load_time:.4f} —Å–µ–∫")
        print(f"  –£—Å–ø–µ—Ö: {'‚úÖ' if success and retrieved == data else '‚ùå'}")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫—ç—à
    cache_manager.clear_all_cache()

def test_cache_types():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫—ç—à–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫—ç—à–∞...")
    
    cache_manager = CacheManager(cache_dir="test_cache")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫—ç—à–∞
    cache_types = ["products", "sales", "stocks", "analytics"]
    
    for cache_type in cache_types:
        test_data = {"type": cache_type, "data": f"test_data_for_{cache_type}"}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ TTL
        ttl_hours = 1 if cache_type in ["products", "analytics"] else 0.5
        success = cache_manager.set_cache(f"test_{cache_type}", test_data, cache_type, ttl_hours)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        retrieved = cache_manager.get_cache(f"test_{cache_type}")
        
        print(f"  {cache_type}: {'‚úÖ' if success and retrieved == test_data else '‚ùå'}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
    stats = cache_manager.get_cache_stats()
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º: {stats.get('type_stats', {})}")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫—ç—à
    cache_manager.clear_all_cache()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è\n")
    
    try:
        test_cache_manager()
        test_cache_performance()
        test_cache_types()
        
        # –¢–µ—Å—Ç API —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
        try:
            test_cached_api_client()
        except Exception as e:
            print(f"‚ö†Ô∏è –¢–µ—Å—Ç API –ø—Ä–æ–ø—É—â–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π): {e}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 