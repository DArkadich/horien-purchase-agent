#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from api_metrics import APIMetricsCollector, MetricType
from ozon_api import OzonAPI
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_metrics_collector():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç APIMetricsCollector"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ APIMetricsCollector...")
    
    # –°–æ–∑–¥–∞–µ–º collector
    metrics_collector = APIMetricsCollector(db_path="test_data/api_metrics_test.db")
    
    # –¢–µ—Å—Ç 1: –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞...")
    metrics_collector.record_response_time("test_endpoint", 150.5, 200)
    metrics_collector.record_response_time("test_endpoint", 2500.0, 200)
    metrics_collector.record_response_time("test_endpoint", 100.0, 500, "Test error")
    
    print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω—ã")
    
    # –¢–µ—Å—Ç 2: –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏...")
    metrics_collector.record_success_rate("test_endpoint", 8, 10)
    metrics_collector.record_success_rate("test_endpoint", 2, 10)
    
    print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∞–Ω—ã")
    
    # –¢–µ—Å—Ç 3: –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –æ—à–∏–±–æ–∫
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫ –æ—à–∏–±–æ–∫...")
    metrics_collector.record_error_rate("test_endpoint", 2, 10)
    metrics_collector.record_error_rate("test_endpoint", 8, 10)
    
    print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–æ–∫ –∑–∞–ø–∏—Å–∞–Ω—ã")
    
    # –¢–µ—Å—Ç 4: –ó–∞–ø–∏—Å—å –¥—Ä—É–≥–∏—Ö –º–µ—Ç—Ä–∏–∫
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç—Ä–∏–∫...")
    metrics_collector.record_throughput("test_endpoint", 120.5)
    metrics_collector.record_cache_hit_rate("test_endpoint", 85.2)
    metrics_collector.record_retry_count("test_endpoint", 2)
    
    print("‚úÖ –î—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã")
    
    # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫...")
    summary = metrics_collector.get_metrics_summary(hours=1)
    if summary:
        print(f"‚úÖ –°–≤–æ–¥–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {len(summary.get('metrics', {}))} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
        for endpoint, metrics in summary.get('metrics', {}).items():
            print(f"  {endpoint}: {len(metrics)} —Ç–∏–ø–æ–≤ –º–µ—Ç—Ä–∏–∫")
    else:
        print("‚ö†Ô∏è –°–≤–æ–¥–∫–∞ –ø—É—Å—Ç–∞")
    
    # –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤...")
    trends = metrics_collector.get_performance_trends(hours=1)
    if trends:
        print(f"‚úÖ –¢—Ä–µ–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(trends.get('response_time_trends', {}))} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–Ω–¥—ã –ø—É—Å—Ç—ã")
    
    # –¢–µ—Å—Ç 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞...")
    report = metrics_collector.generate_performance_report(hours=1)
    print("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
    print(report[:500] + "..." if len(report) > 500 else report)
    
    # –¢–µ—Å—Ç 8: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    metrics_collector.cleanup_old_metrics(days=1)
    print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def test_api_with_metrics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏...")
    
    # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
    api_client = OzonAPI()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏...")
    
    start_time = time.time()
    products = api_client.get_products()
    total_time = time.time() - start_time
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products) if products else 0}")
    print(f"‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics_collector = api_client.metrics_collector
    summary = metrics_collector.get_metrics_summary(hours=1)
    
    if summary and summary.get('metrics'):
        print("üìä –ú–µ—Ç—Ä–∏–∫–∏ API:")
        for endpoint, metrics in summary['metrics'].items():
            print(f"  {endpoint}:")
            for metric_type, data in metrics.items():
                print(f"    {metric_type}: avg={data['avg']:.2f}, count={data['count']}")

def test_metrics_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫...")
    
    metrics_collector = APIMetricsCollector(db_path="test_data/api_metrics_perf_test.db")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫
    start_time = time.time()
    
    for i in range(100):
        metrics_collector.record_response_time(f"endpoint_{i % 5}", 100 + i, 200)
        metrics_collector.record_success_rate(f"endpoint_{i % 5}", 9, 10)
    
    total_time = time.time() - start_time
    avg_time = total_time / 100
    
    print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ 100 –º–µ—Ç—Ä–∏–∫ –∑–∞ {total_time:.2f} —Å–µ–∫")
    print(f"‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {avg_time:.4f} —Å–µ–∫")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏
    start_time = time.time()
    summary = metrics_collector.get_metrics_summary(hours=1)
    summary_time = time.time() - start_time
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏: {summary_time:.4f} —Å–µ–∫")
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ—Ç—Ä–∏–∫: {len(summary.get('metrics', {}))} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")

def test_metrics_alerts():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞–ª–µ—Ä—Ç–æ–≤ –º–µ—Ç—Ä–∏–∫"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤...")
    
    metrics_collector = APIMetricsCollector(db_path="test_data/api_metrics_alerts_test.db")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã –Ω–∞ –≤—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞ –≤—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞...")
    metrics_collector.record_response_time("slow_endpoint", 6000, 200)  # 6 —Å–µ–∫—É–Ω–¥
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã –Ω–∞ –Ω–∏–∑–∫—É—é —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞ –Ω–∏–∑–∫—É—é —É—Å–ø–µ—à–Ω–æ—Å—Ç—å...")
    metrics_collector.record_success_rate("failing_endpoint", 3, 10)  # 30%
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã –Ω–∞ –≤—ã—Å–æ–∫—É—é —á–∞—Å—Ç–æ—Ç—É –æ—à–∏–±–æ–∫
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞ –≤—ã—Å–æ–∫—É—é —á–∞—Å—Ç–æ—Ç—É –æ—à–∏–±–æ–∫...")
    metrics_collector.record_error_rate("error_endpoint", 7, 10)  # 70%
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã –Ω–∞ –º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏...")
    metrics_collector.record_retry_count("retry_endpoint", 5)
    
    print("‚úÖ –ê–ª–µ—Ä—Ç—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API\n")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.makedirs("test_data", exist_ok=True)
        
        test_metrics_collector()
        test_metrics_performance()
        test_metrics_alerts()
        
        # –¢–µ—Å—Ç API —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
        try:
            test_api_with_metrics()
        except Exception as e:
            print(f"‚ö†Ô∏è –¢–µ—Å—Ç API –ø—Ä–æ–ø—É—â–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π): {e}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –º–µ—Ç—Ä–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 