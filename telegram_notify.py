"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
"""

import asyncio
import logging
from typing import Dict, List, Any
from telegram import Bot
from telegram.error import TelegramError
from config import TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, logger

class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self):
        self.token = TELEGRAM_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        self.bot = None
        self._initialize_bot()
    
    def _initialize_bot(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegram –±–æ—Ç–∞
        """
        try:
            self.bot = Bot(token=self.token)
            logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
            raise
    
    async def send_message(self, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        """
        try:
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='HTML'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ Markdown
            )
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False
    
    async def send_purchase_report(self, report_data: List[Dict[str, Any]], summary_data: Dict[str, Any]):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ –∑–∞–∫—É–ø–∫–∞—Ö –≤ Telegram
        """
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–∫—É–ø–∫–∞—Ö –≤ Telegram...")
        
        if not report_data:
            message = "üìä <b>–û—Ç—á–µ—Ç –æ –∑–∞–∫—É–ø–∫–∞—Ö</b>\n\n–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –∑–∞–∫—É–ø–∫–∏."
            await self.send_message(message)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üõí <b>–û—Ç—á–µ—Ç –æ –∑–∞–∫—É–ø–∫–∞—Ö</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
        message += f"üìà <b>–°–≤–æ–¥–∫–∞:</b>\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {summary_data.get('total_items', 0)}\n"
        message += f"‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {summary_data.get('high_priority', 0)}\n"
        message += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {summary_data.get('medium_priority', 0)}\n"
        message += f"‚Ä¢ –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {summary_data.get('low_priority', 0)}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é (–ø–µ—Ä–≤—ã–µ 10 –ø–æ–∑–∏—Ü–∏–π)
        message += "üìã <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b>\n"
        for i, item in enumerate(report_data[:10], 1):
            sku = item['sku']
            days_left = item['days_until_stockout']
            quantity = item['recommended_quantity']
            
            urgency_emoji = "üî¥" if item['urgency'] == 'HIGH' else "üü°" if item['urgency'] == 'MEDIUM' else "üü¢"
            
            message += f"{i}. {urgency_emoji} {sku}\n"
            message += f"   ‚Üí —Ö–≤–∞—Ç–∏—Ç –Ω–∞ {days_left} –¥–Ω–µ–π\n"
            message += f"   ‚Üí –∑–∞–∫–∞–∑–∞—Ç—å {quantity} —à—Ç\n\n"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–∑–∏—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if len(report_data) > 10:
            message += f"... –∏ –µ—â–µ {len(report_data) - 10} –ø–æ–∑–∏—Ü–∏–π\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        message += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        high_priority = summary_data.get('high_priority', 0)
        if high_priority > 0:
            message += f"‚Ä¢ üî¥ {high_priority} –ø–æ–∑–∏—Ü–∏–π —Ç—Ä–µ–±—É—é—Ç —Å—Ä–æ—á–Ω–æ–π –∑–∞–∫—É–ø–∫–∏ (< 10 –¥–Ω–µ–π)\n"
        
        medium_priority = summary_data.get('medium_priority', 0)
        if medium_priority > 0:
            message += f"‚Ä¢ üü° {medium_priority} –ø–æ–∑–∏—Ü–∏–π —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è (< 20 –¥–Ω–µ–π)\n"
        
        message += "\nüìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ Google Sheets"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = await self.send_message(message)
        
        if success:
            logger.info(f"–û—Ç—á–µ—Ç –æ –∑–∞–∫—É–ø–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram: {len(report_data)} –ø–æ–∑–∏—Ü–∏–π")
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Telegram")
    
    async def send_error_notification(self, error_message: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç HTML —Ç–µ–≥–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        clean_message = error_message.replace('<', '&lt;').replace('>', '&gt;')
        message = f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –∞–≥–µ–Ω—Ç–∞ –∑–∞–∫—É–ø–æ–∫</b>\n\n{clean_message}"
        await self.send_message(message)
    
    async def send_startup_notification(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∞–≥–µ–Ω—Ç–∞
        """
        from datetime import datetime
        message = f"üöÄ <b>–ê–≥–µ–Ω—Ç –∑–∞–∫—É–ø–æ–∫ –∑–∞–ø—É—â–µ–Ω</b>\n\n–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        await self.send_message(message)
    
    async def send_completion_notification(self, execution_time: float, items_processed: int):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        """
        message = f"‚úÖ <b>–ê–≥–µ–Ω—Ç –∑–∞–∫—É–ø–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É</b>\n\n"
        message += f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫\n"
        message += f"üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ SKU: {items_processed}\n"
        message += f"üïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        await self.send_message(message)
    
    def send_message_sync(self, message: str) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            loop = asyncio.get_event_loop()
            return loop.run_until_complete(self.send_message(message))
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            return asyncio.run(self.send_message(message))
    
    def send_purchase_report_sync(self, report_data: List[Dict[str, Any]], summary_data: Dict[str, Any]):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–∫—É–ø–∫–∞—Ö
        """
        try:
            loop = asyncio.get_event_loop()
            loop.run_until_complete(self.send_purchase_report(report_data, summary_data))
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            asyncio.run(self.send_purchase_report(report_data, summary_data))
    
    def send_error_notification_sync(self, error_message: str):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        """
        try:
            loop = asyncio.get_event_loop()
            loop.run_until_complete(self.send_error_notification(error_message))
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            asyncio.run(self.send_error_notification(error_message))
    
    def send_startup_notification_sync(self):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
        """
        try:
            loop = asyncio.get_event_loop()
            loop.run_until_complete(self.send_startup_notification())
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            asyncio.run(self.send_startup_notification())
    
    def send_completion_notification_sync(self, execution_time: float, items_processed: int):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        """
        try:
            loop = asyncio.get_event_loop()
            loop.run_until_complete(self.send_completion_notification(execution_time, items_processed))
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            asyncio.run(self.send_completion_notification(execution_time, items_processed)) 