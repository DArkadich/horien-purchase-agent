#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –∞–≥–µ–Ω—Ç–∞ –∑–∞–∫—É–ø–æ–∫ Horiens
"""

import logging
import time
import pandas as pd
from datetime import datetime
from typing import Dict, List, Any
import os
import asyncio

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
from config import validate_config, logger
from ozon_api import OzonAPI
from cache_manager import CacheManager, CachedAPIClient
from api_monitor import APIMonitor, APIMonitoringService
from api_metrics import APIMetricsCollector
from sheets import GoogleSheets
from telegram_notify import TelegramNotifier
from forecast import PurchaseForecast
from stock_tracker import StockTracker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –∑–∞–∫—É–ø–æ–∫"""
    start_time = time.time()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not validate_config():
            logger.error("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        ozon_api = OzonAPI()
        cache_manager = CacheManager()
        cached_api = CachedAPIClient(ozon_api, cache_manager)
        api_monitor = APIMonitor()
        telegram = TelegramNotifier()
        monitoring_service = APIMonitoringService(ozon_api, api_monitor, telegram)
        metrics_collector = APIMetricsCollector()
        sheets = GoogleSheets()
        stock_tracker = StockTracker()
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–π –∫—ç—à
        expired_count = cache_manager.clear_expired_cache()
        if expired_count > 0:
            logger.info(f"–û—á–∏—â–µ–Ω–æ {expired_count} –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        cache_stats = cache_manager.get_cache_stats()
        if cache_stats:
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {cache_stats['total_entries']} –∑–∞–ø–∏—Å–µ–π, {cache_stats['expired_entries']} –∏—Å—Ç–µ–∫—à–∏—Ö")
            for cache_type, stats in cache_stats.get('type_stats', {}).items():
                logger.info(f"  {cache_type}: {stats['count']} –∑–∞–ø–∏—Å–µ–π, {stats['total_size']} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API...")
        health_check = api_monitor.check_api_health(ozon_api, "products")
        logger.info(f"API —Å—Ç–∞—Ç—É—Å: {health_check.status.value} ({health_check.response_time:.0f}–º—Å)")
        
        if health_check.status.value == "down":
            logger.warning("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            await telegram.send_message("‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API –≤ —Ñ–æ–Ω–µ
        monitoring_task = asyncio.create_task(monitoring_service.start_monitoring())
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
        await telegram.send_message("üöÄ –ê–≥–µ–Ω—Ç –∑–∞–∫—É–ø–æ–∫ Horiens –∑–∞–ø—É—â–µ–Ω")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Ozon API
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Ozon API...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        products = cached_api.get_products_with_cache()
        if not products:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ Ozon API")
            await telegram.send_message("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ Ozon API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞.")
            return
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã: {len(products)} —à—Ç")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö...")
        current_stocks = cached_api.get_stocks_data_with_cache()
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö: {len(current_stocks) if current_stocks else 0}")
        if current_stocks:
            logger.info(f"–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö: {current_stocks[:2]}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –∑–∞–ø–∏—Å–∏
        
        if current_stocks:
            stock_tracker.save_stock_data(current_stocks)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(current_stocks)} –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö")
            
            # –û—á–∏—Å—Ç–∫–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–∏—Å—å —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
            logger.info("–û—á–∏—Å—Ç–∫–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–∏—Å—å —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤...")
            sheets.clear_all_synthetic_data()
            sheets.write_stock_data(current_stocks)
        else:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏–∑ API —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏–∑ API...")
        from config import SALES_HISTORY_DAYS
        sales_data = cached_api.get_sales_data_with_cache(days=SALES_HISTORY_DAYS)
        
        if not sales_data:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ü–µ–Ω–∫—É –∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Å—Ç–∞—Ç–∫–æ–≤")
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ü–µ–Ω–∫—É –∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Å—Ç–∞—Ç–∫–æ–≤
            sales_data = stock_tracker.estimate_sales_from_stock_changes(days=SALES_HISTORY_DAYS)
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º —Å –º–µ–Ω—å—à–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
            if not sales_data:
                logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ 180 –¥–Ω–µ–π, –ø—Ä–æ–±—É–µ–º —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                sales_data = stock_tracker.estimate_sales_from_stock_changes(days=30)  # –ü—Ä–æ–±—É–µ–º 30 –¥–Ω–µ–π
                
                if not sales_data:
                    logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    sales_data = stock_tracker.estimate_sales_from_stock_changes(days=1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(sales_data)} –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö...")
        stocks_data = current_stocks if current_stocks else []
        
        if not stocks_data:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö")
            await telegram.send_message("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(stocks_data)} –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö...")
        if sales_data:
            sales_df = pd.DataFrame(sales_data)
            logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(sales_df)} –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame –¥–ª—è –ø—Ä–æ–¥–∞–∂
            sales_df = pd.DataFrame()
            logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
        logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö...")
        stocks_df = pd.DataFrame(stocks_data)
        if not stocks_df.empty:
            logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(stocks_df)} –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö")
        else:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞–∫—É–ø–æ–∫
        logger.info("–†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞–∫—É–ø–æ–∫...")
        calculator = PurchaseForecast()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if not sales_df.empty:
            sales_df = calculator.prepare_sales_data(sales_data)
        stocks_df = calculator.prepare_stocks_data(stocks_data)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        forecast_data = calculator.calculate_forecast(sales_df, stocks_df)
        
        if forecast_data.empty:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–∫—É–ø–æ–∫")
            await telegram.send_message("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–∫—É–ø–æ–∫")
            return
        
        logger.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {len(forecast_data)} –ø–æ–∑–∏—Ü–∏–π")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–∫—É–ø–∫–∞—Ö
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–∫—É–ø–∫–∞—Ö...")
        report_data = calculator.generate_purchase_report(forecast_data)
        
        if not report_data:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –∑–∞–∫—É–ø–∫–∞—Ö")
            await telegram.send_message("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –∑–∞–∫—É–ø–∫–∞—Ö")
            return
        
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç—á–µ—Ç –¥–ª—è {len(report_data)} SKU")
        
        # –ó–∞–ø–∏—Å—å –æ—Ç—á–µ—Ç–∞ –≤ Google Sheets
        logger.info("–ó–∞–ø–∏—Å—å –æ—Ç—á–µ—Ç–∞ –≤ Google Sheets...")
        sheets.write_purchase_report(report_data)
        logger.info("–û—Ç—á–µ—Ç –æ –∑–∞–∫—É–ø–∫–∞—Ö –∑–∞–ø–∏—Å–∞–Ω –≤ Google Sheets")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞...")
        sheets.create_summary_sheet(report_data)
        logger.info("–°–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telegram
        logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        summary_data = {
            'total_items': len(report_data),
            'high_priority': len([item for item in report_data if item.get('urgency') == 'HIGH']),
            'medium_priority': len([item for item in report_data if item.get('urgency') == 'MEDIUM']),
            'low_priority': len([item for item in report_data if item.get('urgency') == 'LOW'])
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram...")
        await telegram.send_purchase_report(report_data, summary_data)
        logger.info("–û—Ç—á–µ—Ç –æ –∑–∞–∫—É–ø–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        execution_time = time.time() - start_time
        await telegram.send_message(
            f"‚úÖ –ê–≥–µ–Ω—Ç –∑–∞–∫—É–ø–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥\n"
            f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(report_data)} –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—É–ø–∫–∏"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ API
        await monitoring_service.send_health_report(hours=1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API
        performance_report = metrics_collector.generate_performance_report(hours=1)
        await telegram.send_message(performance_report)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitoring_service.stop_monitoring()
        
        logger.info("=" * 50)
        logger.info("–ê–≥–µ–Ω—Ç –∑–∞–∫—É–ø–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ %.2f —Å–µ–∫—É–Ω–¥", execution_time)
        logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—É–ø–∫–∏", len(report_data))
        logger.info("=" * 50)
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –∞–≥–µ–Ω—Ç–∞ –∑–∞–∫—É–ø–æ–∫: %s", str(e))
        try:
            if 'telegram' in locals():
                await telegram.send_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –∞–≥–µ–Ω—Ç–∞ –∑–∞–∫—É–ø–æ–∫: {str(e)}")
        except Exception as telegram_error:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram: %s", str(telegram_error))

if __name__ == "__main__":
    asyncio.run(main()) 