#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –∞–≥–µ–Ω—Ç–∞ –∑–∞–∫—É–ø–æ–∫ Horiens
"""

import time
import logging
import os
from datetime import datetime
from typing import Dict, List, Any

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
from config import validate_config, logger
from ozon_api import OzonAPI
from forecast import PurchaseForecast
from sheets import GoogleSheets
from telegram_notify import TelegramNotifier

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    start_time = time.time()
    
    try:
        logger.info("=" * 50)
        logger.info("–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –∑–∞–∫—É–ø–æ–∫ Horiens")
        logger.info("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not validate_config():
            logger.error("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return 1
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        ozon_api = OzonAPI()
        forecast = PurchaseForecast()
        sheets = GoogleSheets()
        telegram = TelegramNotifier()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        telegram.send_startup_notification_sync()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Ozon API
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Ozon API...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        sales_data = ozon_api.get_sales_data()
        if not sales_data:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
            telegram.send_error_notification_sync("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏–∑ Ozon API")
            return 1
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
        stocks_data = ozon_api.get_stocks_data()
        if not stocks_data:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö")
            telegram.send_error_notification_sync("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –∏–∑ Ozon API")
            return 1
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        
        sales_df = forecast.prepare_sales_data(sales_data)
        stocks_df = forecast.prepare_stocks_data(stocks_data)
        
        if sales_df.empty or stocks_df.empty:
            logger.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            telegram.send_error_notification_sync("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return 1
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–∫—É–ø–æ–∫
        logger.info("–†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞–∫—É–ø–æ–∫...")
        
        forecast_df = forecast.calculate_forecast(sales_df, stocks_df)
        
        if forecast_df.empty:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞–∫—É–ø–æ–∫")
            telegram.send_message_sync("üìä –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –∑–∞–∫—É–ø–∫–∏.")
            return 0
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –∑–∞–∫—É–ø–∫–∞—Ö
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–∫—É–ø–∫–∞—Ö...")
        
        purchase_report = forecast.generate_purchase_report(forecast_df)
        
        if not purchase_report:
            logger.info("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –∑–∞–∫—É–ø–∫–∏")
            telegram.send_message_sync("üìä –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –∑–∞–∫—É–ø–∫–∏.")
            return 0
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        summary_data = generate_summary_data(purchase_report)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –≤ Google Sheets
        logger.info("–ó–∞–ø–∏—Å—å –æ—Ç—á–µ—Ç–∞ –≤ Google Sheets...")
        
        try:
            sheets.write_purchase_report(purchase_report)
            sheets.create_summary_sheet(summary_data)
            logger.info("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ Google Sheets")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
            telegram.send_error_notification_sync(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
            return 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram...")
        
        try:
            telegram.send_purchase_report_sync(purchase_report, summary_data)
            logger.info("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_time = time.time() - start_time
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        telegram.send_completion_notification_sync(execution_time, len(purchase_report))
        
        logger.info("=" * 50)
        logger.info(f"–ê–≥–µ–Ω—Ç –∑–∞–∫—É–ø–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(purchase_report)} –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—É–ø–∫–∏")
        logger.info("=" * 50)
        
        return 0
        
    except Exception as e:
        execution_time = time.time() - start_time
        error_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_message, exc_info=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            telegram = TelegramNotifier()
            telegram.send_error_notification_sync(error_message)
        except:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
        
        return 1

def generate_summary_data(report_data: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    """
    if not report_data:
        return {
            'total_items': 0,
            'high_priority': 0,
            'medium_priority': 0,
            'low_priority': 0,
            'total_value': 0,
            'items': []
        }
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
    high_priority = sum(1 for item in report_data if item['urgency'] == 'HIGH')
    medium_priority = sum(1 for item in report_data if item['urgency'] == 'MEDIUM')
    low_priority = sum(1 for item in report_data if item['urgency'] == 'LOW')
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    total_value = sum(item['recommended_quantity'] for item in report_data)
    
    return {
        'total_items': len(report_data),
        'high_priority': high_priority,
        'medium_priority': medium_priority,
        'low_priority': low_priority,
        'total_value': total_value,
        'items': report_data
    }

if __name__ == "__main__":
    exit_code = main()
    exit(exit_code) 