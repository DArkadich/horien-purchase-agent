#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å –ø–µ—Ä–∏–æ–¥–æ–º –∞–Ω–∞–ª–∏–∑–∞ –≤ 2 –¥–Ω—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import DAYS_TO_ANALYZE
from forecast import PurchaseForecast, DataValidator

def test_2_days_period():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å –ø–µ—Ä–∏–æ–¥–æ–º –≤ 2 –¥–Ω—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å –ø–µ—Ä–∏–æ–¥–æ–º –∞–Ω–∞–ª–∏–∑–∞ –≤ 2 –¥–Ω—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
    print(f"‚úÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {DAYS_TO_ANALYZE} –¥–Ω–µ–π")
    assert DAYS_TO_ANALYZE == 2, f"–û–∂–∏–¥–∞–ª–æ—Å—å 2 –¥–Ω—è, –ø–æ–ª—É—á–µ–Ω–æ {DAYS_TO_ANALYZE}"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 2 –¥–Ω—è
    test_sales_data = [
        {"sku": "SKU_001", "date": "2024-01-01", "quantity": 10, "revenue": 1000},
        {"sku": "SKU_001", "date": "2024-01-02", "quantity": 15, "revenue": 1500},
        {"sku": "SKU_002", "date": "2024-01-01", "quantity": 5, "revenue": 500},
        {"sku": "SKU_002", "date": "2024-01-02", "quantity": 8, "revenue": 800},
    ]
    
    test_stocks_data = [
        {"sku": "SKU_001", "stock": 50, "reserved": 10},
        {"sku": "SKU_002", "stock": 30, "reserved": 5},
    ]
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    sales_valid, sales_errors = DataValidator.validate_sales_data(test_sales_data)
    stocks_valid, stocks_errors = DataValidator.validate_stocks_data(test_stocks_data)
    
    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö: {sales_valid}")
    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö: {stocks_valid}")
    
    assert sales_valid, f"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂: {sales_errors}"
    assert stocks_valid, f"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {stocks_errors}"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    forecast = PurchaseForecast()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    sales_df = forecast.prepare_sales_data(test_sales_data)
    stocks_df = forecast.prepare_stocks_data(test_stocks_data)
    
    print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–æ–¥–∞–∂–∞—Ö: {len(sales_df)}")
    print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö: {len(stocks_df)}")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    forecast_df = forecast.calculate_forecast(sales_df, stocks_df)
    
    print(f"‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {len(forecast_df)} SKU")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 2 –¥–Ω—è–º–∏
    for _, row in forecast_df.iterrows():
        print(f"  SKU {row['sku']}: {row['total_sales_days']} –¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂")
        assert row['total_sales_days'] <= 2, f"SKU {row['sku']} –∏–º–µ–µ—Ç –±–æ–ª—å—à–µ 2 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = forecast.generate_purchase_report(forecast_df)
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç—á–µ—Ç —Å {len(report)} –ø–æ–∑–∏—Ü–∏—è–º–∏")
    
    print("\nüéâ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–∏–æ–¥–æ–º –∞–Ω–∞–ª–∏–∑–∞ –≤ 2 –¥–Ω—è!")

if __name__ == "__main__":
    test_2_days_period() 