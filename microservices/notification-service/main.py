"""
Notification Service - –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
import logging
import httpx
from typing import List, Dict, Any
from datetime import datetime

from shared.models import NotificationMessage
from shared.utils import (
    ServiceUtils, MetricsCollector, HealthChecker, 
    MessageQueue, timing_decorator
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="Notification Service", version="1.0.0")

# Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
metrics_collector = MetricsCollector("notification-service")
health_checker = HealthChecker("notification-service")
message_queue = MessageQueue("amqp://guest:guest@rabbitmq:5672/")

# –ò–º–ø–æ—Ä—Ç –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), "../../"))

from telegram_notify import TelegramNotifier

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
telegram_notifier = TelegramNotifier()

# –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—É–¥–µ—Ç –≤ –ë–î)
notification_history = []

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
    health_checker.add_check("telegram", lambda: telegram_notifier is not None)
    health_checker.add_check("message_queue", lambda: message_queue is not None)

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    checks = health_checker.run_health_checks()
    overall_status = "healthy" if all(
        check["status"] == "healthy" for check in checks.values()
    ) else "unhealthy"
    
    return {
        "service": "notification-service",
        "status": overall_status,
        "checks": checks,
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0"
    }

@app.get("/metrics")
async def get_metrics():
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "service": "notification-service",
        "metrics": metrics_collector.get_metrics(),
        "timestamp": datetime.now().isoformat()
    }

@timing_decorator(metrics_collector)
@app.post("/send")
async def send_notification(message: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if "text" not in message:
            raise HTTPException(status_code=400, detail="Message must contain 'text' field")
        
        text = message["text"]
        level = message.get("level", "info")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification = NotificationMessage(
            service="notification-service",
            message=text,
            level=level,
            metadata=message.get("metadata", {})
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram
        success = await telegram_notifier.send_message(text)
        
        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            notification_history.append({
                "id": ServiceUtils.generate_correlation_id(),
                "message": notification.dict(),
                "sent_at": datetime.now().isoformat(),
                "status": "sent"
            })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
            message_queue.publish_event(
                "notification_sent",
                {
                    "notification_id": notification_history[-1]["id"],
                    "level": level,
                    "timestamp": datetime.now().isoformat()
                },
                routing_key="notification_events"
            )
            
            metrics_collector.record_counter("notifications_sent", 1)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
            
            return {
                "status": "sent",
                "notification_id": notification_history[-1]["id"],
                "timestamp": datetime.now().isoformat()
            }
        else:
            metrics_collector.record_counter("notifications_failed", 1)
            raise HTTPException(status_code=500, detail="Failed to send notification")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        metrics_collector.record_counter("notifications_error", 1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
        message_queue.publish_event(
            "notification_error",
            {
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            },
            routing_key="notification_events"
        )
        
        raise HTTPException(status_code=500, detail=f"Notification sending failed: {str(e)}")

@app.post("/send/batch")
async def send_batch_notifications(messages: List[Dict[str, Any]]):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–∫–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        results = []
        
        for message in messages:
            try:
                result = await send_notification(message)
                results.append({
                    "message": message,
                    "status": "success",
                    "result": result
                })
            except Exception as e:
                results.append({
                    "message": message,
                    "status": "error",
                    "error": str(e)
                })
        
        success_count = len([r for r in results if r["status"] == "success"])
        error_count = len([r for r in results if r["status"] == "error"])
        
        metrics_collector.record_counter("batch_notifications_sent", success_count)
        metrics_collector.record_counter("batch_notifications_failed", error_count)
        
        return {
            "results": results,
            "summary": {
                "total": len(messages),
                "success": success_count,
                "errors": error_count
            },
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/history")
async def get_notification_history(limit: int = 50):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return {
        "notifications": notification_history[-limit:] if notification_history else [],
        "total_count": len(notification_history),
        "timestamp": datetime.now().isoformat()
    }

@app.get("/templates")
async def get_notification_templates():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    templates = [
        {
            "name": "forecast_report",
            "description": "–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –∑–∞–∫—É–ø–æ–∫",
            "template": "üõí *–û—Ç—á–µ—Ç –æ –∑–∞–∫—É–ø–∫–∞—Ö*\n\n{content}",
            "variables": ["content"]
        },
        {
            "name": "api_health_alert",
            "description": "–ê–ª–µ—Ä—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ API",
            "template": "üö® *API Health Alert*\n\n{service}: {status}\n{details}",
            "variables": ["service", "status", "details"]
        },
        {
            "name": "data_refresh",
            "description": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
            "template": "üìä *Data Refresh*\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ:\n- –¢–æ–≤–∞—Ä—ã: {products_count}\n- –û—Å—Ç–∞—Ç–∫–∏: {stocks_count}\n- –ü—Ä–æ–¥–∞–∂–∏: {sales_count}",
            "variables": ["products_count", "stocks_count", "sales_count"]
        }
    ]
    
    return {
        "templates": templates,
        "timestamp": datetime.now().isoformat()
    }

@app.post("/templates/{template_name}")
async def send_template_notification(template_name: str, variables: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        templates_response = await get_notification_templates()
        template = next((t for t in templates_response["templates"] if t["name"] == template_name), None)
        
        if not template:
            raise HTTPException(status_code=404, detail=f"Template '{template_name}' not found")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        missing_vars = [var for var in template["variables"] if var not in variables]
        if missing_vars:
            raise HTTPException(status_code=400, detail=f"Missing variables: {missing_vars}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = template["template"]
        for var_name, var_value in variables.items():
            message_text = message_text.replace(f"{{{var_name}}}", str(var_value))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        return await send_notification({
            "text": message_text,
            "level": "info",
            "metadata": {
                "template": template_name,
                "variables": variables
            }
        })
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/subscriptions")
async def get_subscriptions():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫"""
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
    return {
        "subscriptions": [
            {
                "id": "default",
                "name": "Default Subscription",
                "telegram_chat_id": "default",
                "enabled": True,
                "created_at": datetime.now().isoformat()
            }
        ],
        "timestamp": datetime.now().isoformat()
    }

@app.post("/subscriptions")
async def create_subscription(subscription: Dict[str, Any]):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É"""
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    return {
        "id": ServiceUtils.generate_correlation_id(),
        "subscription": subscription,
        "created_at": datetime.now().isoformat()
    }

@app.delete("/subscriptions/{subscription_id}")
async def delete_subscription(subscription_id: str):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É"""
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    return {
        "id": subscription_id,
        "deleted_at": datetime.now().isoformat()
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8003) 