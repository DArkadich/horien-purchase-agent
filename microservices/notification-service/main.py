"""
Notification Service - –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import os
import sys
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import httpx
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from shared.models import (
    NotificationRequest, NotificationResponse, NotificationHistory,
    SubscriptionRequest, SubscriptionResponse, TemplateRequest,
    BaseResponse, ErrorResponse
)
from shared.utils import (
    get_config, setup_logging, RedisClient, RabbitMQClient,
    DatabaseClient, handle_service_error, ServiceException
)

# ============================================================================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ============================================================================

config = get_config()
logger = setup_logging('notification-service', config['log_level'])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
redis_client = RedisClient(config['redis_url'])
rabbitmq_client = RabbitMQClient(config['rabbitmq_url'])
db_client = DatabaseClient(config['postgres_url'])

# ============================================================================
# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# ============================================================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    logger.info("Notification Service –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    yield
    # Shutdown
    logger.info("Notification Service –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    rabbitmq_client.close()

app = FastAPI(
    title="Notification Service",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ============================================================================
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
# ============================================================================

def get_redis_client() -> RedisClient:
    return redis_client

def get_rabbitmq_client() -> RabbitMQClient:
    return rabbitmq_client

def get_db_client() -> DatabaseClient:
    return db_client

# ============================================================================
# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
# ============================================================================

class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""

    def __init__(self, bot_token: str, chat_id: str):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"

    async def send_message(self, message: str, parse_mode: str = "Markdown") -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.post(
                    f"{self.base_url}/sendMessage",
                    json={
                        "chat_id": self.chat_id,
                        "text": message,
                        "parse_mode": parse_mode
                    }
                )
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get('ok'):
                        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                        return True
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {result}")
                        return False
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False

    async def send_photo(self, photo_url: str, caption: str = "") -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤ Telegram"""
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.post(
                    f"{self.base_url}/sendPhoto",
                    json={
                        "chat_id": self.chat_id,
                        "photo": photo_url,
                        "caption": caption,
                        "parse_mode": "Markdown"
                    }
                )
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get('ok'):
                        logger.info("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                        return True
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {result}")
                        return False
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ Telegram: {e}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
telegram_notifier = TelegramNotifier(
    config.get('telegram_bot_token', ''),
    config.get('telegram_chat_id', '')
)

# ============================================================================
# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏
# ============================================================================

class TemplateManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def __init__(self):
        self.templates = {
            'forecast_alert': {
                'title': 'üõí –ê–ª–µ—Ä—Ç –ø–æ –ø—Ä–æ–≥–Ω–æ–∑—É –∑–∞–∫—É–ø–æ–∫',
                'template': """
{alert_type} *{title}*

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {total_items}
‚Ä¢ –¢—Ä–µ–±—É—é—Ç –∑–∞–∫—É–ø–∫–∏: {needs_purchase}
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {critical_items}
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_quantity} —à—Ç

‚è∞ *–í—Ä–µ–º—è:* {timestamp}
                """.strip()
            },
            'stock_alert': {
                'title': 'üì¶ –ê–ª–µ—Ä—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º',
                'template': """
{alert_type} *{title}*

üì¶ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤:*
‚Ä¢ –ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ (< 10): {low_stock}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫ (10-50): {medium_stock}
‚Ä¢ –í—ã—Å–æ–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ (> 50): {high_stock}

‚è∞ *–í—Ä–µ–º—è:* {timestamp}
                """.strip()
            },
            'system_alert': {
                'title': 'üîß –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
                'template': """
{alert_type} *{title}*

üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:* {message}

üîó *–î–µ–π—Å—Ç–≤–∏–µ:* {action}

‚è∞ *–í—Ä–µ–º—è:* {timestamp}
                """.strip()
            },
            'sync_completed': {
                'title': '‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                'template': """
‚úÖ *–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Ozon API –∑–∞–≤–µ—Ä—à–µ–Ω–∞*

üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:*
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {processed_items}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: {updated_stocks}
‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}

‚è∞ *–í—Ä–µ–º—è:* {timestamp}
                """.strip()
            },
            'error_alert': {
                'title': '‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
                'template': """
‚ùå *{title}*

üö® *–û—à–∏–±–∫–∞:* {error_message}

üìç *–ú–µ—Å—Ç–æ:* {location}
üîß *–î–µ–π—Å—Ç–≤–∏–µ:* {action}

‚è∞ *–í—Ä–µ–º—è:* {timestamp}
                """.strip()
            }
        }

    def get_template(self, template_name: str) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ –∏–º–µ–Ω–∏"""
        return self.templates.get(template_name)

    def format_message(self, template_name: str, **kwargs) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É"""
        template = self.get_template(template_name)
        if not template:
            return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω: {template_name}"
        
        try:
            return template['template'].format(**kwargs)
        except KeyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ {template_name}: {e}")
            return f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}"

    def add_template(self, name: str, title: str, template: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω"""
        try:
            self.templates[name] = {
                'title': title,
                'template': template
            }
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω: {name}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
            return False

    def list_templates(self) -> List[Dict[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        return [
            {'name': name, 'title': template['title']}
            for name, template in self.templates.items()
        ]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤
template_manager = TemplateManager()

# ============================================================================
# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
# ============================================================================

class SubscriptionManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""

    def __init__(self, redis_client: RedisClient):
        self.redis_client = redis_client
        self.subscription_key = "notifications:subscriptions"

    def add_subscription(self, user_id: str, notification_types: List[str]) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            subscriptions = self.get_subscriptions()
            subscriptions[user_id] = {
                'notification_types': notification_types,
                'created_at': datetime.now().isoformat(),
                'active': True
            }
            
            self.redis_client.set(
                self.subscription_key,
                json.dumps(subscriptions),
                ttl=86400 * 30  # 30 –¥–Ω–µ–π
            )
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False

    def remove_subscription(self, user_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            subscriptions = self.get_subscriptions()
            if user_id in subscriptions:
                del subscriptions[user_id]
                
                self.redis_client.set(
                    self.subscription_key,
                    json.dumps(subscriptions),
                    ttl=86400 * 30
                )
                
                logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False

    def get_subscriptions(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            data = self.redis_client.get(self.subscription_key)
            if data:
                return json.loads(data)
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return {}

    def is_subscribed(self, user_id: str, notification_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        subscriptions = self.get_subscriptions()
        user_sub = subscriptions.get(user_id, {})
        
        if not user_sub.get('active', False):
            return False
        
        return notification_type in user_sub.get('notification_types', [])

    def get_active_subscribers(self, notification_type: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        subscriptions = self.get_subscriptions()
        subscribers = []
        
        for user_id, sub in subscriptions.items():
            if sub.get('active', False) and notification_type in sub.get('notification_types', []):
                subscribers.append(user_id)
        
        return subscribers

# ============================================================================
# –ö–ª–∞—Å—Å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# ============================================================================

class NotificationHistoryManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self, db_client: DatabaseClient):
        self.db_client = db_client

    def save_notification(self, notification_data: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            query = """
                INSERT INTO notification_history 
                (notification_type, recipient, message, status, created_at)
                VALUES (:notification_type, :recipient, :message, :status, :created_at)
            """
            
            params = {
                'notification_type': notification_data.get('type', 'unknown'),
                'recipient': notification_data.get('recipient', 'telegram'),
                'message': notification_data.get('message', ''),
                'status': notification_data.get('status', 'sent'),
                'created_at': datetime.now().isoformat()
            }
            
            self.db_client.execute_query(query, params)
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

    def get_notification_history(self, limit: int = 100, 
                               notification_type: str = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            query = """
                SELECT id, notification_type, recipient, message, status, created_at
                FROM notification_history
            """
            params = {}
            
            if notification_type:
                query += " WHERE notification_type = :notification_type"
                params['notification_type'] = notification_type
            
            query += " ORDER BY created_at DESC LIMIT :limit"
            params['limit'] = limit
            
            result = self.db_client.execute_query(query, params)
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return []

    def get_notification_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            query = """
                SELECT 
                    COUNT(*) as total_notifications,
                    COUNT(CASE WHEN status = 'sent' THEN 1 END) as sent_count,
                    COUNT(CASE WHEN status = 'failed' THEN 1 END) as failed_count,
                    notification_type,
                    DATE(created_at) as date
                FROM notification_history
                WHERE created_at >= :start_date
                GROUP BY notification_type, DATE(created_at)
                ORDER BY date DESC
            """
            
            start_date = (datetime.now() - timedelta(days=30)).isoformat()
            result = self.db_client.execute_query(query, {'start_date': start_date})
            
            stats = {
                'total_notifications': 0,
                'sent_count': 0,
                'failed_count': 0,
                'by_type': {},
                'by_date': {}
            }
            
            for row in result:
                stats['total_notifications'] += row['total_notifications']
                stats['sent_count'] += row['sent_count']
                stats['failed_count'] += row['failed_count']
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
                if row['notification_type'] not in stats['by_type']:
                    stats['by_type'][row['notification_type']] = {
                        'total': 0,
                        'sent': 0,
                        'failed': 0
                    }
                
                stats['by_type'][row['notification_type']]['total'] += row['total_notifications']
                stats['by_type'][row['notification_type']]['sent'] += row['sent_count']
                stats['by_type'][row['notification_type']]['failed'] += row['failed_count']
            
            return stats
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return {}

# ============================================================================
# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã
# ============================================================================

@app.post("/notifications/send", response_model=NotificationResponse)
@handle_service_error
async def send_notification(
    request: NotificationRequest,
    background_tasks: BackgroundTasks,
    redis_client: RedisClient = Depends(get_redis_client),
    rabbitmq_client: RabbitMQClient = Depends(get_rabbitmq_client)
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞: {request.notification_type}")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É
    if request.template_name:
        message = template_manager.format_message(
            request.template_name,
            **request.template_data
        )
    else:
        message = request.message

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    success = await telegram_notifier.send_message(message)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    notification_data = {
        'type': request.notification_type,
        'recipient': 'telegram',
        'message': message,
        'status': 'sent' if success else 'failed'
    }

    background_tasks.add_task(
        save_notification_history,
        notification_data,
        redis_client
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
    event = {
        'event_type': 'notification_sent',
        'service': 'notification-service',
        'data': {
            'notification_type': request.notification_type,
            'success': success,
            'timestamp': datetime.now().isoformat()
        }
    }

    rabbitmq_client.publish_message('notifications.events', event)

    return NotificationResponse(
        success=success,
        message="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        notification_id=f"notif_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    )

@app.post("/notifications/send_photo")
@handle_service_error
async def send_photo_notification(
    photo_url: str,
    caption: str = "",
    background_tasks: BackgroundTasks = None,
    rabbitmq_client: RabbitMQClient = Depends(get_rabbitmq_client)
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

    success = await telegram_notifier.send_photo(photo_url, caption)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
    event = {
        'event_type': 'photo_notification_sent',
        'service': 'notification-service',
        'data': {
            'photo_url': photo_url,
            'success': success,
            'timestamp': datetime.now().isoformat()
        }
    }

    rabbitmq_client.publish_message('notifications.events', event)

    return {
        'success': success,
        'message': "–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ"
    }

@app.post("/subscriptions/add", response_model=SubscriptionResponse)
@handle_service_error
async def add_subscription(
    request: SubscriptionRequest,
    redis_client: RedisClient = Depends(get_redis_client)
):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user_id}")

    subscription_manager = SubscriptionManager(redis_client)
    success = subscription_manager.add_subscription(
        request.user_id,
        request.notification_types
    )

    return SubscriptionResponse(
        success=success,
        message="–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞" if success else "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"
    )

@app.delete("/subscriptions/remove/{user_id}", response_model=SubscriptionResponse)
@handle_service_error
async def remove_subscription(
    user_id: str,
    redis_client: RedisClient = Depends(get_redis_client)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    subscription_manager = SubscriptionManager(redis_client)
    success = subscription_manager.remove_subscription(user_id)

    return SubscriptionResponse(
        success=success,
        message="–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞" if success else "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    )

@app.get("/subscriptions/{user_id}")
@handle_service_error
async def get_user_subscription(
    user_id: str,
    redis_client: RedisClient = Depends(get_redis_client)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    subscription_manager = SubscriptionManager(redis_client)
    subscriptions = subscription_manager.get_subscriptions()
    
    user_subscription = subscriptions.get(user_id, {})
    
    return {
        'user_id': user_id,
        'subscription': user_subscription,
        'active': user_subscription.get('active', False)
    }

@app.get("/subscriptions/active/{notification_type}")
@handle_service_error
async def get_active_subscribers(
    notification_type: str,
    redis_client: RedisClient = Depends(get_redis_client)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    subscription_manager = SubscriptionManager(redis_client)
    subscribers = subscription_manager.get_active_subscribers(notification_type)
    
    return {
        'notification_type': notification_type,
        'subscribers': subscribers,
        'count': len(subscribers)
    }

@app.get("/templates")
@handle_service_error
async def get_templates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
    templates = template_manager.list_templates()
    
    return {
        'templates': templates,
        'count': len(templates)
    }

@app.post("/templates/add")
@handle_service_error
async def add_template(request: TemplateRequest):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: {request.name}")

    success = template_manager.add_template(
        request.name,
        request.title,
        request.template
    )

    return {
        'success': success,
        'message': "–®–∞–±–ª–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω" if success else "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"
    }

@app.get("/history", response_model=NotificationHistory)
@handle_service_error
async def get_notification_history(
    limit: int = 100,
    notification_type: str = None,
    db_client: DatabaseClient = Depends(get_db_client)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: limit={limit}, type={notification_type}")

    history_manager = NotificationHistoryManager(db_client)
    history = history_manager.get_notification_history(limit, notification_type)

    return NotificationHistory(
        success=True,
        notifications=history,
        total_count=len(history)
    )

@app.get("/history/stats")
@handle_service_error
async def get_notification_stats(
    db_client: DatabaseClient = Depends(get_db_client)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    logger.info("–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    history_manager = NotificationHistoryManager(db_client)
    stats = history_manager.get_notification_stats()

    return {
        'success': True,
        'stats': stats
    }

@app.post("/notifications/broadcast")
@handle_service_error
async def broadcast_notification(
    notification_type: str,
    message: str,
    background_tasks: BackgroundTasks,
    redis_client: RedisClient = Depends(get_redis_client),
    rabbitmq_client: RabbitMQClient = Depends(get_rabbitmq_client)
):
    """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Ç–∏–ø–∞: {notification_type}")

    subscription_manager = SubscriptionManager(redis_client)
    subscribers = subscription_manager.get_active_subscribers(notification_type)

    if not subscribers:
        return {
            'success': False,
            'message': "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    success_count = 0
    for subscriber in subscribers:
        success = await telegram_notifier.send_message(message)
        if success:
            success_count += 1

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
    event = {
        'event_type': 'broadcast_completed',
        'service': 'notification-service',
        'data': {
            'notification_type': notification_type,
            'total_subscribers': len(subscribers),
            'success_count': success_count,
            'timestamp': datetime.now().isoformat()
        }
    }

    rabbitmq_client.publish_message('notifications.events', event)

    return {
        'success': True,
        'message': f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{len(subscribers)} —É—Å–ø–µ—à–Ω–æ"
    }

# ============================================================================
# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
# ============================================================================

async def save_notification_history(
    notification_data: Dict[str, Any],
    redis_client: RedisClient
):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {notification_data['type']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")

# ============================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
# ============================================================================

def handle_notification_event(ch, method, properties, body):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    try:
        event = json.loads(body)
        event_type = event.get('event_type')
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_type}")
        
        if event_type == 'forecast_alert':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ –ø—Ä–æ–≥–Ω–æ–∑—É
            message = template_manager.format_message(
                'forecast_alert',
                **event.get('data', {})
            )
            telegram_notifier.send_message(message)
            
        elif event_type == 'stock_alert':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
            message = template_manager.format_message(
                'stock_alert',
                **event.get('data', {})
            )
            telegram_notifier.send_message(message)
            
        elif event_type == 'system_alert':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
            message = template_manager.format_message(
                'system_alert',
                **event.get('data', {})
            )
            telegram_notifier.send_message(message)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

# ============================================================================
# Health check
# ============================================================================

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "service": "notification-service",
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": config['version']
    }

# ============================================================================
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ============================================================================

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8003,
        reload=True,
        log_level=config['log_level'].lower()
    ) 