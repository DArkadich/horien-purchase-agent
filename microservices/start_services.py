#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
"""

import os
import sys
import subprocess
import time
import signal
import logging
from typing import List, Dict
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class MicroservicesManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        self.services = {
            'gateway': {
                'port': 8000,
                'path': 'gateway/main.py',
                'description': 'API Gateway'
            },
            'data-service': {
                'port': 8001,
                'path': 'data-service/main.py',
                'description': 'Data Service'
            },
            'forecast-service': {
                'port': 8002,
                'path': 'forecast-service/main.py',
                'description': 'Forecast Service'
            },
            'notification-service': {
                'port': 8003,
                'path': 'notification-service/main.py',
                'description': 'Notification Service'
            },
            'monitoring-service': {
                'port': 8004,
                'path': 'monitoring-service/main.py',
                'description': 'Monitoring Service'
            },
            'storage-service': {
                'port': 8005,
                'path': 'storage-service/main.py',
                'description': 'Storage Service'
            }
        }
        self.processes = {}
    
    def start_service(self, service_name: str) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
        if service_name not in self.services:
            logger.error(f"–°–µ—Ä–≤–∏—Å {service_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        service_config = self.services[service_name]
        service_path = Path(__file__).parent / service_config['path']
        
        if not service_path.exists():
            logger.error(f"–§–∞–π–ª {service_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
            process = subprocess.Popen([
                sys.executable, str(service_path)
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            self.processes[service_name] = process
            logger.info(f"–ó–∞–ø—É—â–µ–Ω {service_config['description']} (PID: {process.pid})")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            if process.poll() is None:
                logger.info(f"{service_config['description']} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {service_config['port']}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {service_config['description']}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {service_name}: {e}")
            return False
    
    def stop_service(self, service_name: str) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
        if service_name not in self.processes:
            logger.warning(f"–ü—Ä–æ—Ü–µ—Å—Å {service_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        process = self.processes[service_name]
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            process.terminate()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            process.wait(timeout=10)
            
            logger.info(f"–°–µ—Ä–≤–∏—Å {service_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            del self.processes[service_name]
            return True
            
        except subprocess.TimeoutExpired:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
            process.kill()
            logger.warning(f"–°–µ—Ä–≤–∏—Å {service_name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            del self.processes[service_name]
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {service_name}: {e}")
            return False
    
    def start_all_services(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"""
        logger.info("–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        success_count = 0
        total_services = len(self.services)
        
        for service_name in self.services:
            logger.info(f"–ó–∞–ø—É—Å–∫ {service_name}...")
            if self.start_service(service_name):
                success_count += 1
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å {service_name}")
        
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ {success_count} –∏–∑ {total_services} —Å–µ—Ä–≤–∏—Å–æ–≤")
        return success_count == total_services
    
    def stop_all_services(self) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        success_count = 0
        total_services = len(self.processes)
        
        for service_name in list(self.processes.keys()):
            if self.stop_service(service_name):
                success_count += 1
        
        logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {success_count} –∏–∑ {total_services} —Å–µ—Ä–≤–∏—Å–æ–≤")
        return success_count == total_services
    
    def check_service_health(self, service_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞"""
        if service_name not in self.services:
            return False
        
        process = self.processes.get(service_name)
        if not process:
            return False
        
        return process.poll() is None
    
    def get_status(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        status = {}
        
        for service_name, service_config in self.services.items():
            is_running = self.check_service_health(service_name)
            process = self.processes.get(service_name)
            
            status[service_name] = {
                'running': is_running,
                'port': service_config['port'],
                'description': service_config['description'],
                'pid': process.pid if process and is_running else None
            }
        
        return status
    
    def print_status(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        status = self.get_status()
        
        print("\n" + "="*60)
        print("–°–¢–ê–¢–£–° –ú–ò–ö–†–û–°–ï–†–í–ò–°–û–í")
        print("="*60)
        
        for service_name, info in status.items():
            status_icon = "üü¢" if info['running'] else "üî¥"
            print(f"{status_icon} {service_name}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
            print(f"   –ü–æ—Ä—Ç: {info['port']}")
            print(f"   –°—Ç–∞—Ç—É—Å: {'–ó–∞–ø—É—â–µ–Ω' if info['running'] else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
            if info['pid']:
                print(f"   PID: {info['pid']}")
            print()
    
    def wait_for_services(self, timeout: int = 60) -> bool:
        """–ñ–¥–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (—Ç–∞–π–º–∞—É—Ç: {timeout}—Å)...")
        
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            all_ready = True
            
            for service_name in self.services:
                if not self.check_service_health(service_name):
                    all_ready = False
                    break
            
            if all_ready:
                logger.info("–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã!")
                return True
            
            time.sleep(1)
        
        logger.error("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")
        return False

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã...")
    manager.stop_all_services()
    sys.exit(0)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global manager
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = MicroservicesManager()
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python start_services.py start    - –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã")
        print("  python start_services.py stop     - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã")
        print("  python start_services.py status   - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
        print("  python start_services.py restart  - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã")
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "start":
        print("–ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤...")
        if manager.start_all_services():
            print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
            if manager.wait_for_services():
                print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
                print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
                print("  API Gateway: http://localhost:8000")
                print("  Data Service: http://localhost:8001")
                print("  Forecast Service: http://localhost:8002")
                print("  Notification Service: http://localhost:8003")
                print("  Monitoring Service: http://localhost:8004")
                print("  Storage Service: http://localhost:8005")
                
                # –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã–º
                try:
                    while True:
                        time.sleep(1)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
                        for service_name in manager.services:
                            if not manager.check_service_health(service_name):
                                logger.error(f"–°–µ—Ä–≤–∏—Å {service_name} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è")
                                break
                except KeyboardInterrupt:
                    print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
            else:
                print("‚ùå –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤")
            sys.exit(1)
    
    elif command == "stop":
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤...")
        if manager.stop_all_services():
            print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")
            sys.exit(1)
    
    elif command == "status":
        manager.print_status()
    
    elif command == "restart":
        print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤...")
        manager.stop_all_services()
        time.sleep(2)
        if manager.start_all_services():
            print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤")
            sys.exit(1)
    
    else:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        sys.exit(1)

if __name__ == "__main__":
    manager = None
    main() 