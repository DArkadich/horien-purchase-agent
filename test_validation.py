#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from forecast import DataValidator, PurchaseForecast
import pandas as pd
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_sales_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö...")
    
    # –¢–µ—Å—Ç 1: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    valid_sales = [
        {"sku": "TEST001", "date": "2024-01-01", "quantity": 5, "revenue": 1000},
        {"sku": "TEST002", "date": "2024-01-01", "quantity": 3, "revenue": 600},
    ]
    
    is_valid, errors = DataValidator.validate_sales_data(valid_sales)
    print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {'–ü–†–û–ô–î–ï–ù' if is_valid else '–ü–†–û–í–ê–õ–ï–ù'}")
    if errors:
        print(f"   –û—à–∏–±–∫–∏: {errors}")
    
    # –¢–µ—Å—Ç 2: –î–∞–Ω–Ω—ã–µ —Å –æ—à–∏–±–∫–∞–º–∏
    invalid_sales = [
        {"sku": "TEST001", "date": "2024-01-01", "quantity": -5},  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        {"sku": 123, "date": "2024-01-01", "quantity": 5},  # SKU –Ω–µ —Å—Ç—Ä–æ–∫–∞
        {"sku": "TEST002", "date": "invalid-date", "quantity": 5},  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞
        {"sku": "TEST003", "date": "2024-01-01", "quantity": 2000},  # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    ]
    
    is_valid, errors = DataValidator.validate_sales_data(invalid_sales)
    print(f"‚ùå –î–∞–Ω–Ω—ã–µ —Å –æ—à–∏–±–∫–∞–º–∏: {'–ü–†–û–ô–î–ï–ù' if not is_valid else '–ü–†–û–í–ê–õ–ï–ù'}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}")
    for error in errors[:3]:
        print(f"   - {error}")
    
    # –¢–µ—Å—Ç 3: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    is_valid, errors = DataValidator.validate_sales_data([])
    print(f"‚ùå –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ: {'–ü–†–û–ô–î–ï–ù' if not is_valid else '–ü–†–û–í–ê–õ–ï–ù'}")

def test_stocks_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö...")
    
    # –¢–µ—Å—Ç 1: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    valid_stocks = [
        {"sku": "TEST001", "stock": 100, "reserved": 10},
        {"sku": "TEST002", "stock": 50, "reserved": 5},
    ]
    
    is_valid, errors = DataValidator.validate_stocks_data(valid_stocks)
    print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {'–ü–†–û–ô–î–ï–ù' if is_valid else '–ü–†–û–í–ê–õ–ï–ù'}")
    
    # –¢–µ—Å—Ç 2: –î–∞–Ω–Ω—ã–µ —Å –æ—à–∏–±–∫–∞–º–∏
    invalid_stocks = [
        {"sku": "TEST001", "stock": -10, "reserved": 5},  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
        {"sku": "TEST002", "stock": 50, "reserved": 60},  # –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞
        {"sku": 123, "stock": 50, "reserved": 5},  # SKU –Ω–µ —Å—Ç—Ä–æ–∫–∞
    ]
    
    is_valid, errors = DataValidator.validate_stocks_data(invalid_stocks)
    print(f"‚ùå –î–∞–Ω–Ω—ã–µ —Å –æ—à–∏–±–∫–∞–º–∏: {'–ü–†–û–ô–î–ï–ù' if not is_valid else '–ü–†–û–í–ê–õ–ï–ù'}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}")
    for error in errors:
        print(f"   - {error}")

def test_data_cleaning():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –≤—ã–±—Ä–æ—Å–∞–º–∏
    sales_data = [
        {"sku": "TEST001", "date": "2024-01-01", "quantity": 5, "revenue": 1000},
        {"sku": "TEST001", "date": "2024-01-02", "quantity": -3, "revenue": 600},  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        {"sku": "TEST001", "date": "2024-01-03", "quantity": 1000, "revenue": 200000},  # –í—ã–±—Ä–æ—Å
        {"sku": "", "date": "2024-01-04", "quantity": 5, "revenue": 1000},  # –ü—É—Å—Ç–æ–π SKU
        {"sku": "TEST002", "date": None, "quantity": 5, "revenue": 1000},  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞
    ]
    
    df = pd.DataFrame(sales_data)
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(df)} –∑–∞–ø–∏—Å–µ–π")
    
    cleaned_df = DataValidator.clean_sales_data(df)
    print(f"–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(cleaned_df)} –∑–∞–ø–∏—Å–µ–π")
    print(f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df) - len(cleaned_df)}")

def test_forecast_with_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    sales_data = [
        {"sku": "TEST001", "date": "2024-01-01", "quantity": 5, "revenue": 1000},
        {"sku": "TEST001", "date": "2024-01-02", "quantity": 3, "revenue": 600},
        {"sku": "TEST001", "date": "2024-01-03", "quantity": 7, "revenue": 1400},
        {"sku": "TEST002", "date": "2024-01-01", "quantity": 2, "revenue": 400},
        {"sku": "TEST002", "date": "2024-01-02", "quantity": 1, "revenue": 200},
    ]
    
    stocks_data = [
        {"sku": "TEST001", "stock": 50, "reserved": 5},
        {"sku": "TEST002", "stock": 20, "reserved": 2},
        {"sku": "TEST003", "stock": 100, "reserved": 10},  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
    ]
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    forecast = PurchaseForecast()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    sales_df = forecast.prepare_sales_data(sales_data)
    stocks_df = forecast.prepare_stocks_data(stocks_data)
    
    print(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–∂: {len(sales_df)} –∑–∞–ø–∏—Å–µ–π")
    print(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(stocks_df)} –∑–∞–ø–∏—Å–µ–π")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    forecast_result = forecast.calculate_forecast(sales_df, stocks_df)
    
    if not forecast_result.empty:
        print(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {len(forecast_result)} SKU")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = forecast.generate_purchase_report(forecast_result)
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç—á–µ—Ç –¥–ª—è {len(report)} SKU")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
        quality_stats = forecast_result['forecast_quality'].value_counts()
        print("–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–∞:")
        for quality, count in quality_stats.items():
            print(f"  {quality}: {count} SKU")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö\n")
    
    try:
        test_sales_validation()
        test_stocks_validation()
        test_data_cleaning()
        test_forecast_with_validation()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 