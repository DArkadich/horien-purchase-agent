#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import pandas as pd
from datetime import datetime, timedelta
import random
from forecast import PurchaseForecast, DataValidator

def generate_test_sales_data(num_skus=50, days=30):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö"""
    sales_data = []
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SKU
    skus = [f"SKU_{i:03d}" for i in range(1, num_skus + 1)]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã
    end_date = datetime.now()
    start_date = end_date - timedelta(days=days)
    dates = pd.date_range(start=start_date, end=end_date, freq='D')
    
    for sku in skus:
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ SKU
        base_sales = random.randint(1, 20)
        
        for date in dates:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
            daily_sales = max(0, int(base_sales + random.gauss(0, 3)))
            
            # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å: –±–æ–ª—å—à–µ –ø—Ä–æ–¥–∞–∂ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
            if date.weekday() >= 5:  # –°—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                daily_sales = int(daily_sales * 1.5)
            
            if daily_sales > 0:
                sales_data.append({
                    'sku': sku,
                    'date': date.strftime('%Y-%m-%d'),
                    'quantity': daily_sales,
                    'revenue': daily_sales * random.uniform(100, 1000)
                })
    
    return sales_data

def generate_test_stocks_data(num_skus=50):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
    stocks_data = []
    
    skus = [f"SKU_{i:03d}" for i in range(1, num_skus + 1)]
    
    for sku in skus:
        stock = random.randint(0, 100)
        reserved = random.randint(0, min(stock, 30))
        
        stocks_data.append({
            'sku': sku,
            'stock': stock,
            'reserved': reserved
        })
    
    return stocks_data

def test_forecast_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    forecast = PurchaseForecast()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    sales_data = generate_test_sales_data(num_skus=30, days=60)
    stocks_data = generate_test_stocks_data(num_skus=30)
    
    print(f"   –°–æ–∑–¥–∞–Ω–æ {len(sales_data)} –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
    print(f"   –°–æ–∑–¥–∞–Ω–æ {len(stocks_data)} –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    sales_valid, sales_errors = DataValidator.validate_sales_data(sales_data)
    stocks_valid, stocks_errors = DataValidator.validate_stocks_data(stocks_data)
    
    print(f"   –ü—Ä–æ–¥–∞–∂–∏: {'‚úÖ' if sales_valid else '‚ùå'}")
    if not sales_valid:
        print(f"   –û—à–∏–±–∫–∏: {len(sales_errors)}")
    
    print(f"   –û—Å—Ç–∞—Ç–∫–∏: {'‚úÖ' if stocks_valid else '‚ùå'}")
    if not stocks_valid:
        print(f"   –û—à–∏–±–∫–∏: {len(stocks_errors)}")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìà –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    sales_df = forecast.prepare_sales_data(sales_data)
    stocks_df = forecast.prepare_stocks_data(stocks_data)
    
    print(f"   –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(sales_df)} –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
    print(f"   –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(stocks_df)} –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö")
    
    # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
    print("\nüéØ –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞...")
    forecast_df = forecast.calculate_forecast(sales_df, stocks_df)
    
    if not forecast_df.empty:
        print(f"   –†–∞—Å—Å—á–∏—Ç–∞–Ω –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {len(forecast_df)} SKU")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞
        forecast_valid, forecast_errors = forecast.validate_forecast_data(forecast_df)
        print(f"   –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {'‚úÖ' if forecast_valid else '‚ùå'}")
        if not forecast_valid:
            print(f"   –û—à–∏–±–∫–∏: {len(forecast_errors)}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        print("\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
        report = forecast.generate_purchase_report(forecast_df)
        print(f"   –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç –¥–ª—è {len(report)} –ø–æ–∑–∏—Ü–∏–π")
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
        analytics = forecast.get_forecast_analytics(forecast_df)
        if analytics:
            print(f"   –í—Å–µ–≥–æ SKU: {analytics['total_skus']}")
            print(f"   –¢—Ä–µ–±—É—é—Ç –∑–∞–∫—É–ø–∫–∏: {analytics['skus_needing_purchase']}")
            print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π: {analytics['skus_critical']}")
            print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {analytics['total_recommended_quantity']} —à—Ç")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
        recommendations = forecast.get_forecast_recommendations(forecast_df)
        print(f"   –°–æ–∑–¥–∞–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        print("\nüìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞...")
        dashboard_data = forecast.generate_dashboard_data(forecast_df, sales_df)
        print(f"   –°–æ–∑–¥–∞–Ω–æ {len(dashboard_data.get('alerts', []))} –∞–ª–µ—Ä—Ç–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
        print("\nüìÖ –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏...")
        seasonality = forecast.analyze_seasonality(sales_df)
        if seasonality:
            peak_day = seasonality['peak_day']
            peak_month = seasonality['peak_month']
            print(f"   –ü–∏–∫–æ–≤—ã–π –¥–µ–Ω—å: {peak_day['day']} ({peak_day['avg_sales']} —à—Ç)")
            print(f"   –ü–∏–∫–æ–≤—ã–π –º–µ—Å—è—Ü: {peak_month['month']} ({peak_month['avg_sales']} —à—Ç)")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤
        print("\nüíæ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤...")
        csv_file = forecast.export_report_to_csv(report)
        json_file = forecast.export_report_to_json(report)
        
        if csv_file:
            print(f"   CSV –æ—Ç—á–µ—Ç: {csv_file}")
        if json_file:
            print(f"   JSON –æ—Ç—á–µ—Ç: {json_file}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        print("\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        summary_report = forecast.create_forecast_summary_report(
            forecast_df, analytics, recommendations
        )
        print("   –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω")
        
        # Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
        print("\nüì± –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Telegram —Å–æ–æ–±—â–µ–Ω–∏—è...")
        telegram_message = forecast.generate_telegram_message(report)
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π {len(telegram_message)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –æ—Ç—á–µ—Ç–∞
        print("\nüìã –ü—Ä–∏–º–µ—Ä –æ—Ç—á–µ—Ç–∞:")
        if report:
            example = report[0]
            print(f"   SKU: {example['sku']}")
            print(f"   –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–∞–∂–∞: {example['avg_daily_sales']} —à—Ç/–¥–µ–Ω—å")
            print(f"   –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {example['current_stock']} —à—Ç")
            print(f"   –î–Ω–µ–π –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è: {example['days_until_stockout']}")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {example['recommended_quantity']} —à—Ç")
            print(f"   –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {example['forecast_quality']}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {example['confidence']}")
            print(f"   –°—Ä–æ—á–Ω–æ—Å—Ç—å: {example['urgency']}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_forecast_functionality() 