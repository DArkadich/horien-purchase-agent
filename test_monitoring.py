#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from api_monitor import APIMonitor, APIMonitoringService, APIStatus
from ozon_api import OzonAPI
import time
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_api_monitor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç APIMonitor"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ APIMonitor...")
    
    # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç –∏ –º–æ–Ω–∏—Ç–æ—Ä
    api_client = OzonAPI()
    monitor = APIMonitor(db_path="test_data/api_health_test.db")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API...")
    health_check = monitor.check_api_health(api_client, "products")
    
    print(f"‚úÖ –°—Ç–∞—Ç—É—Å API: {health_check.status.value}")
    print(f"‚úÖ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {health_check.response_time:.0f}–º—Å")
    print(f"‚úÖ –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: {health_check.status_code}")
    if health_check.error_message:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {health_check.error_message}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    stats = monitor.get_health_stats(hours=1)
    if stats:
        print(f"‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_checks']} –ø—Ä–æ–≤–µ—Ä–æ–∫")
        print(f"‚úÖ Uptime: {stats['uptime_percentage']:.1f}%")
        print(f"‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['avg_response_time']:.0f}–º—Å")
    else:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤...")
    incidents = monitor.get_recent_incidents(hours=1)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(incidents)} –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
    
    # –¢–µ—Å—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞...")
    report = monitor.generate_health_report(hours=1)
    print("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
    print(report[:500] + "..." if len(report) > 500 else report)
    
    # –¢–µ—Å—Ç 5: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    monitor.cleanup_old_data(days=1)
    print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def test_monitoring_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç APIMonitoringService"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ APIMonitoringService...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    api_client = OzonAPI()
    monitor = APIMonitor(db_path="test_data/api_health_test.db")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π telegram notifier –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    class TestTelegramNotifier:
        async def send_message(self, message):
            print(f"üì± Telegram: {message[:100]}...")
    
    telegram_notifier = TestTelegramNotifier()
    monitoring_service = APIMonitoringService(api_client, monitor, telegram_notifier)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
    print("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥...")
    monitoring_task = asyncio.create_task(monitoring_service.start_monitoring())
    
    # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(10)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitoring_service.stop_monitoring()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    await monitoring_service.send_health_report(hours=1)
    
    print("‚úÖ –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã API"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API...")
    
    api_client = OzonAPI()
    monitor = APIMonitor(db_path="test_data/api_health_test.db")
    
    endpoints = ["products", "stocks", "sales", "analytics"]
    
    for endpoint in endpoints:
        print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: {endpoint}")
        try:
            health_check = monitor.check_api_health(api_client, endpoint)
            print(f"  –°—Ç–∞—Ç—É—Å: {health_check.status.value}")
            print(f"  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {health_check.response_time:.0f}–º—Å")
            print(f"  –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: {health_check.status_code}")
            
            if health_check.error_message:
                print(f"  –û—à–∏–±–∫–∞: {health_check.error_message}")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")

def test_monitoring_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    api_client = OzonAPI()
    monitor = APIMonitor(db_path="test_data/api_health_test.db")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–æ–∫
    start_time = time.time()
    
    for i in range(5):
        health_check = monitor.check_api_health(api_client, "products")
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {i+1}: {health_check.response_time:.0f}–º—Å")
    
    total_time = time.time() - start_time
    avg_time = total_time / 5
    
    print(f"‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {avg_time:.2f} —Å–µ–∫")
    print(f"‚úÖ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API\n")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.makedirs("test_data", exist_ok=True)
        
        test_api_monitor()
        test_api_endpoints()
        test_monitoring_performance()
        
        # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        await test_monitoring_service()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 